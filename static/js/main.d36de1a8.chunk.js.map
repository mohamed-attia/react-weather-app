{"version":3,"sources":["components/Weather.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["WeatherComponent","props","className","tempreature","city","country","humidity","description","error","FormComponent","onSubmit","getWeather","type","name","placeholder","API_KEY","App","state","e","a","preventDefault","target","elements","value","console","log","fetch","api","json","data","setState","main","temp","sys","weather","Form","this","Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oSAgBeA,G,MAbU,SAAAC,GACvB,OACE,yBAAKC,UAAU,QACXD,EAAME,aAAe,uBAAGD,UAAU,YAAb,iBAAsC,0BAAMA,UAAU,cAAcD,EAAME,cAC/FF,EAAMG,MAAQ,uBAAGF,UAAU,YAAb,UAA+B,0BAAMA,UAAU,cAAcD,EAAMG,OACjFH,EAAMI,SAAW,uBAAGH,UAAU,YAAb,aAAkC,0BAAMA,UAAU,cAAcD,EAAMI,UACvFJ,EAAMK,UAAY,uBAAGJ,UAAU,YAAb,cAAmC,0BAAMA,UAAU,cAAcD,EAAMK,WACzFL,EAAMM,aAAe,uBAAGL,UAAU,YAAb,iBAAsC,0BAAMA,UAAU,cAAcD,EAAMM,cAC/FN,EAAMO,OAAS,uBAAGN,UAAU,YAAb,WAAgC,0BAAMA,UAAU,cAAcD,EAAMO,WCE5EC,EAXO,SAACR,GACf,OACI,0BAAMS,SAAUT,EAAMU,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDCHVC,EAAU,mCA0DDC,E,2MAxDbC,MAAQ,CACNd,YAAa,GACbC,KAAM,GACNC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,MAAO,I,EAETG,W,uCAAa,WAAMO,GAAN,qBAAAC,EAAA,6DACXD,EAAEE,iBACIhB,EAAOc,EAAEG,OAAOC,SAASlB,KAAKmB,MAC9BlB,EAAUa,EAAEG,OAAOC,SAASjB,QAAQkB,MAC1CC,QAAQC,IAAIrB,EAAMC,GAJP,SAKOqB,MAAM,oDAAD,OAC+BtB,EAD/B,YACuCC,EADvC,kBACwDU,IANpE,cAKLY,EALK,gBAQQA,EAAIC,OARZ,OAQLC,EARK,OASPzB,GAAQC,EACV,EAAKyB,SAAS,CACZ3B,YAAa0B,EAAKE,KAAKC,KACvB5B,KAAMyB,EAAKhB,KACXR,QAASwB,EAAKI,IAAI5B,QAClBC,SAAUuB,EAAKE,KAAKzB,SACpBC,YAAasB,EAAKK,QAAQ,GAAG3B,YAC7BC,MAAO,KAGT,EAAKsB,SAAS,CACZ3B,YAAa,GACbC,KAAM,GACNC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,MAAO,sBAzBA,4C,8HA8BX,OACE,yBAAKN,UAAU,WACb,yBAAKA,UAAU,kBACb,kBAACiC,EAAD,CAAexB,WAAYyB,KAAKzB,aAChC,kBAAC0B,EAAD,CACElC,YAAaiC,KAAKnB,MAAMd,YACxBC,KAAMgC,KAAKnB,MAAMb,KACjBC,QAAS+B,KAAKnB,MAAMZ,QACpBC,SAAU8B,KAAKnB,MAAMX,SACrBC,YAAa6B,KAAKnB,MAAMV,YACxBC,MAAO4B,KAAKnB,MAAMT,c,GAjDZ8B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9C,GACLgB,QAAQhB,MAAMA,EAAM+C,c","file":"static/js/main.d36de1a8.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\n\r\nconst WeatherComponent = props => {\r\n  return (\r\n    <div className=\"info\">\r\n       {props.tempreature && <p className=\"info_key\">Tempreature : <span className=\"info_value\">{props.tempreature}</span></p>} \r\n       {props.city && <p className=\"info_key\">City : <span className=\"info_value\">{props.city}</span></p>}  \r\n       {props.country && <p className=\"info_key\">Country : <span className=\"info_value\">{props.country}</span></p>} \r\n       {props.humidity && <p className=\"info_key\">Humidity : <span className=\"info_value\">{props.humidity}</span></p>} \r\n       {props.description && <p className=\"info_key\">Description : <span className=\"info_value\">{props.description}</span></p>} \r\n       {props.error && <p className=\"info_key\">error : <span className=\"info_value\">{props.error}</span></p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherComponent;\r\n","import React from 'react';\r\n\r\nconst FormComponent = (props)=> {\r\n        return (\r\n            <form onSubmit={props.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n                <button>Get Weather</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n\r\nexport default FormComponent","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport WeatherComponent from \"./components/Weather\";\nimport FormComponent from \"./components/Form\";\nconst API_KEY = \"b71518988b478c02e5ed1117ae7af575\";\nclass App extends Component {\n  state = {\n    tempreature: \"\",\n    city: \"\",\n    country: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\"\n  };\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    console.log(city, country);\n    const api = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`\n    );\n    const data = await api.json();\n    if (city && country) {\n      this.setState({\n        tempreature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        tempreature: \"\",\n        city: \"\",\n        country: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"please enter data\"\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"form-container\">\n          <FormComponent getWeather={this.getWeather} />\n          <WeatherComponent\n            tempreature={this.state.tempreature}\n            city={this.state.city}\n            country={this.state.country}\n            humidity={this.state.humidity}\n            description={this.state.description}\n            error={this.state.error}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}